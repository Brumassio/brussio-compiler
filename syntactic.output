Nonterminals useless in grammar

    exp
    term
    unary_operator
    expression_increment
    expression_decrement
    binary_operator
    variable
    assignment
    for_stat
    $@2
    while_stat
    $@3
    if_stat
    else_if_part
    $@4
    else_part
    $@5
    tail
    statements
    statement
    class_declaration
    class_body
    class_members
    class_member
    attribute_declaration
    method_declaration
    parameters_list
    parameter_declaration
    program


Terminals unused in grammar

    TOKEN_IF
    TOKEN_ELSE
    TOKEN_FOR
    TOKEN_WHILE
    TOKEN_INT
    TOKEN_IDOUBLE
    TOKEN_MASTER
    TOKEN_INCLUDE
    TOKEN_PRINT
    TOKEN_RETURN
    TOKEN_BREAK
    TOKEN_CONTINUE
    TOKEN_CLASS
    TOKEN_SUM
    TOKEN_SUB
    TOKEN_MULT
    TOKEN_DIV
    TOKEN_EQUAL
    TOKEN_INCREMENT
    TOKEN_DECREMENT
    TOKEN_GT
    TOKEN_LT
    TOKEN_GE
    TOKEN_LE
    TOKEN_NE
    TOKEN_XOR
    TOKEN_OR
    TOKEN_AND
    TOKEN_ASSIGN
    TOKEN_LBRACE
    TOKEN_RBRACE
    TOKEN_DOT
    TOKEN_VIRGULA
    TOKEN_LPAREN
    TOKEN_RPAREN
    UMINUS
    '('
    ')'
    '!'
    '{'
    '}'


Rules useless in grammar

    9 exp: term
   10    | unary_operator exp
   11    | exp binary_operator exp
   12    | '(' exp ')'
   13    | variable

   14 term: expression_increment
   15     | expression_decrement

   16 unary_operator: TOKEN_INCREMENT
   17               | TOKEN_DECREMENT
   18               | '!'

   19 expression_increment: TOKEN_INCREMENT exp

   20 expression_decrement: TOKEN_DECREMENT exp

   21 binary_operator: TOKEN_SUM
   22                | TOKEN_SUB
   23                | TOKEN_MULT
   24                | TOKEN_DIV
   25                | TOKEN_OR
   26                | TOKEN_AND
   27                | TOKEN_EQUAL
   28                | TOKEN_NE
   29                | TOKEN_GT
   30                | TOKEN_LT
   31                | TOKEN_GE
   32                | TOKEN_LE

   33 variable: TOKEN_IDENTIFICADOR

   34 assignment: variable TOKEN_ASSIGN exp TOKEN_PONTOEVIRGULA

   35 $@2: ε

   36 for_stat: TOKEN_FOR $@2 '(' exp TOKEN_PONTOEVIRGULA exp TOKEN_PONTOEVIRGULA exp ')' tail

   37 $@3: ε

   38 while_stat: TOKEN_WHILE $@3 '(' exp ')' tail

   39 if_stat: TOKEN_IF '(' exp ')' tail else_if_part else_part

   40 else_if_part: else_if_part TOKEN_ELSE TOKEN_IF '(' exp ')' tail
   41             | TOKEN_ELSE

   42 $@4: ε

   43 else_if_part: TOKEN_IF $@4 '(' exp ')' tail
   44             | ε

   45 $@5: ε

   46 else_part: TOKEN_ELSE $@5 tail
   47          | ε

   48 tail: statement
   49     | '{' statements '}'

   50 statements: statements statement
   51           | statement

   52 statement: if_stat
   53          | for_stat
   54          | while_stat
   55          | assignment
   56          | TOKEN_CONTINUE TOKEN_PONTOEVIRGULA
   57          | TOKEN_BREAK TOKEN_PONTOEVIRGULA
   58          | TOKEN_RETURN TOKEN_PONTOEVIRGULA

   59 class_declaration: TOKEN_CLASS TOKEN_IDENTIFICADOR TOKEN_LBRACE class_body TOKEN_RBRACE

   60 class_body: class_members

   61 class_members: class_members class_member
   62              | ε

   63 class_member: attribute_declaration
   64             | method_declaration

   65 attribute_declaration: type TOKEN_IDENTIFICADOR TOKEN_PONTOEVIRGULA

   66 method_declaration: type TOKEN_IDENTIFICADOR TOKEN_LPAREN parameters_list TOKEN_RPAREN '{' statements '}'

   67 parameters_list: parameter_declaration
   68                | parameters_list TOKEN_VIRGULA parameter_declaration

   69 parameter_declaration: type TOKEN_IDENTIFICADOR

   70 program: declarations statements


Grammar

    0 $accept: declarations $end

    1 declarations: declarations declaration
    2             | declaration

    3 $@1: ε

    4 declaration: type TOKEN_IDENTIFICADOR $@1 TOKEN_PONTOEVIRGULA

    5 type: TOKEN_INTEGER
    6     | TOKEN_CHAR
    7     | TOKEN_DOUBLE
    8     | TOKEN_VOID


Terminals, with rules where they appear

    $end (0) 0
    '!' (33)
    '(' (40)
    ')' (41)
    '{' (123)
    '}' (125)
    error (256)
    TOKEN_IF <obj> (258)
    TOKEN_ELSE <obj> (259)
    TOKEN_FOR <obj> (260)
    TOKEN_WHILE <obj> (261)
    TOKEN_INT <obj> (262)
    TOKEN_VOID <obj> (263) 8
    TOKEN_IDOUBLE <obj> (264)
    TOKEN_MASTER <obj> (265)
    TOKEN_INCLUDE <obj> (266)
    TOKEN_PRINT <obj> (267)
    TOKEN_RETURN <obj> (268)
    TOKEN_BREAK <obj> (269)
    TOKEN_CONTINUE <obj> (270)
    TOKEN_CLASS <obj> (271)
    TOKEN_INTEGER <obj> (272) 5
    TOKEN_CHAR <obj> (273) 6
    TOKEN_IDENTIFICADOR <obj> (274) 4
    TOKEN_DOUBLE <obj> (275) 7
    TOKEN_SUM <obj> (276)
    TOKEN_SUB <obj> (277)
    TOKEN_MULT <obj> (278)
    TOKEN_DIV <obj> (279)
    TOKEN_EQUAL <obj> (280)
    TOKEN_INCREMENT <obj> (281)
    TOKEN_DECREMENT <obj> (282)
    TOKEN_GT <obj> (283)
    TOKEN_LT <obj> (284)
    TOKEN_GE <obj> (285)
    TOKEN_LE <obj> (286)
    TOKEN_NE <obj> (287)
    TOKEN_XOR <obj> (288)
    TOKEN_OR <obj> (289)
    TOKEN_AND <obj> (290)
    TOKEN_ASSIGN <obj> (291)
    TOKEN_LBRACE <obj> (292)
    TOKEN_RBRACE <obj> (293)
    TOKEN_DOT <obj> (294)
    TOKEN_PONTOEVIRGULA <obj> (295) 4
    TOKEN_VIRGULA <obj> (296)
    TOKEN_LPAREN <obj> (297)
    TOKEN_RPAREN <obj> (298)
    UMINUS (299)


Nonterminals, with rules where they appear

    $accept (50)
        on left: 0
    declarations (51)
        on left: 1 2
        on right: 0 1
    declaration <obj> (52)
        on left: 4
        on right: 1 2
    $@1 (53)
        on left: 3
        on right: 4
    type <obj> (54)
        on left: 5 6 7 8
        on right: 4


State 0

    0 $accept: • declarations $end

    TOKEN_VOID     shift, and go to state 1
    TOKEN_INTEGER  shift, and go to state 2
    TOKEN_CHAR     shift, and go to state 3
    TOKEN_DOUBLE   shift, and go to state 4

    declarations  go to state 5
    declaration   go to state 6
    type          go to state 7


State 1

    8 type: TOKEN_VOID •

    $default  reduce using rule 8 (type)


State 2

    5 type: TOKEN_INTEGER •

    $default  reduce using rule 5 (type)


State 3

    6 type: TOKEN_CHAR •

    $default  reduce using rule 6 (type)


State 4

    7 type: TOKEN_DOUBLE •

    $default  reduce using rule 7 (type)


State 5

    0 $accept: declarations • $end
    1 declarations: declarations • declaration

    $end           shift, and go to state 8
    TOKEN_VOID     shift, and go to state 1
    TOKEN_INTEGER  shift, and go to state 2
    TOKEN_CHAR     shift, and go to state 3
    TOKEN_DOUBLE   shift, and go to state 4

    declaration  go to state 9
    type         go to state 7


State 6

    2 declarations: declaration •

    $default  reduce using rule 2 (declarations)


State 7

    4 declaration: type • TOKEN_IDENTIFICADOR $@1 TOKEN_PONTOEVIRGULA

    TOKEN_IDENTIFICADOR  shift, and go to state 10


State 8

    0 $accept: declarations $end •

    $default  accept


State 9

    1 declarations: declarations declaration •

    $default  reduce using rule 1 (declarations)


State 10

    4 declaration: type TOKEN_IDENTIFICADOR • $@1 TOKEN_PONTOEVIRGULA

    $default  reduce using rule 3 ($@1)

    $@1  go to state 11


State 11

    4 declaration: type TOKEN_IDENTIFICADOR $@1 • TOKEN_PONTOEVIRGULA

    TOKEN_PONTOEVIRGULA  shift, and go to state 12


State 12

    4 declaration: type TOKEN_IDENTIFICADOR $@1 TOKEN_PONTOEVIRGULA •

    $default  reduce using rule 4 (declaration)
